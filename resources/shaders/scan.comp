#version 430

#define BLOCK_SIZE 16

layout( local_size_x = BLOCK_SIZE ) in;

layout( push_constant ) uniform params {
  uint len;
} PushConstant;

layout(std430, binding = 0) buffer a 
{
    float A[];
};

layout(std430, binding = 1) buffer Sum
{
    float sum[];
};

layout(std430, binding = 2) buffer b
{
    float B[];
};

shared float temp[BLOCK_SIZE * 2];

void main() 
{

    uint idx = gl_LocalInvocationID.x;
    int offset = 1;
    temp[idx] = A[gl_WorkGroupID.x * PushConstant.len + idx];
    temp[idx + BLOCK_SIZE] = A[gl_WorkGroupID.x * PushConstant.len + idx + BLOCK_SIZE];
    for ( int d = int(PushConstant.len) >> 1; d > 0; d >>= 1 ) {
        barrier ();
        if ( idx < d )
        {
            int ai = offset * (2 * int(idx) + 1) - 1;
            int bi = offset * (2 * int(idx) + 2) - 1;
            temp [bi] += temp [ai];
        }
        offset <<= 1;
    }

    if (idx == 0) {
        B[gl_WorkGroupID.x] = temp[PushConstant.len - 1];
        temp[PushConstant.len - 1] = 0;
    }

    for (int d = 1; d < PushConstant.len; d <<= 1) {
        offset >>= 1;
        barrier();
        if ( idx < d ) {
            int ai = offset * (2 * int(idx) + 1) - 1;
            int bi = offset * (2 * int(idx) + 2) - 1;
            float t = temp[ai];
            temp[ai] = temp[bi];
            temp[bi] += t;
        }
    }
    barrier();
    sum[gl_WorkGroupID.x * PushConstant.len + 2 * idx] = temp[2 * idx];
    sum[gl_WorkGroupID.x * PushConstant.len + 2 * idx + 1] = temp[2 * idx + 1];
}